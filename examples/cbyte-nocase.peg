# Extended PEG grammar for chpeg bytecode parser/compiler
#
# The effective grammar is basically the same as the original PEG grammar from
# Bryan Ford's paper, but with Options added in front of <- to guide parse tree building.

# Hierarchical syntax
Grammar     {S} <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILS]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {S} <- ( ['] (!['] Char)* ['] /  ["] (!["] Char)* ["] ) NoCase?
CharClass   {S} <- '[' (!']' CharRange)+ ']'
CharRange   { } <- Char '-' !']' Char / Char
Char        { } <- EscChar / HexChar / OctChar / PlainChar
EscChar     {L} <- '\\' [abefnrtv'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
HexChar     {L} <- '\\x' [0-9a-fA-F][0-9a-fA-F]?
PlainChar   {L} <- !'\\' .
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
Dot         {L} <- '.'
NoCase      {L} <- 'i' !Identifier
EndLine     {L} <- '\r\n' / '\n\r' / '\n' / '\r'
Comment     {L} <- '#' (!EndLine .)* EndLine
Space       {L} <- [ \t\r\n\f\v]
S           {I} <- (Space+ / Comment)*
