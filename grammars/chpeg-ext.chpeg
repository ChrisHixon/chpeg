# Extended PEG grammar for chpeg bytecode parser/compiler, defined in its own grammar.
#
# This grammar is optimized for chpeg and generates the AST the compiler expects

# Hierarchical syntax
Grammar     {S} <- S Definition+ !.
Definition      <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice          <- Sequence ('/' S Sequence)*
Sequence        <- Element+
Element         <- Predicate / Trim
Predicate       <- (PredOp S)? Repeat
Repeat          <- Primary (RepOp S / '{' S MinMax S '}' S )?
Primary         <- Identifier S !('{' S [CSILTPR]) !'<-'
                 / '(' S Choice ')' S
                 / Reference S
                 / Mark S
                 / Literal S
                 / CharClass S
                 / NCharClass S
                 / Dot S

# REFS extension
Mark        {S} <- '$' Identifier '<' S Choice '>'
Reference   {S} <- '$' Identifier !'<'

# TRIM extension
Trim        {S} <- '<' S Choice '>' S

# MINMAX extension
MinMax      {S} <- MinMaxVal S Comma S MinMaxVal
                 / MinMaxVal S Comma S
                 / Comma S MinMaxVal
                 / MinMaxVal
MinMaxVal   {L} <- [1-9][0-9]* / '0'

# Lexical syntax
Options         <- [CSILTPR]+
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {S} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' !'^' (!']' CharRange)+ ']'
NCharClass  {S} <- '[^' (!']' CharRange)+ ']'
CharRange       <- Char '-' !']' Char / Char
Char            <- PlainChar / HexChar / EscChar / OctChar
EscChar     {L} <- '\\' [ntr'"\[\]\\fvab]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
HexChar     {L} <- '\\x' [0-9a-fA-F][0-9a-fA-F]?
PlainChar   {L} <- !'\\' .
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
Dot         {L} <- '.'
Comma       {L} <- ','

S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n]? )*
