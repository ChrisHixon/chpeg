# Extended PEG grammar for chpeg bytecode parser/compiler, defined in its own grammar.
#
# This grammar is optimized for chpeg and generates the AST the compiler expects

# Hierarchical syntax
Grammar     {S} <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Element+
Element     { } <- Predicate / Mark / Trim
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S !'{' !'<-'
                 / '(' S Choice ')' S
                 / Reference S
                 / Literal S
                 / CharClass S
                 / Dot S

# REFS extension
Mark        {S} <- '$' Identifier '<' S Choice '>' S
Reference   {S} <- '$' Identifier !'<'

# TRIM extension
Trim        {S} <- '<' S Choice '>' S

# Lexical syntax
Options     { } <- [A-Za-z]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {S} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)+ ']'
CharRange   { } <- Char '-' !']' Char / Char
Char        { } <- EscChar / OctChar / PlainChar
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
PlainChar   {L} <- !'\\' .
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
Dot         {L} <- '.'

S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n]? )*
