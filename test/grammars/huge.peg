# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

# Extended PEG grammar, adjusted to capture desired things, and with efficiency in mind 

# Hierarchical syntax
Grammar         <- S Definition+ !.
Definition  { } <- Identifier S ('{' S Options S '}' S)? '<-' S Choice
Choice      { } <- Sequence ('/' S Sequence)*
Sequence    { } <- Predicate+
Predicate   { } <- (PredOp S)? Repeat
Repeat      { } <- Primary (RepOp S)?
Primary     { } <- Identifier S ![{<]
                 / '(' S Choice ')' S
                 / Literal S / CharClass S / Dot S

# Lexical syntax
Options     { } <- [ILUSE]*
Identifier  {L} <- [a-zA-Z_][a-zA-Z_0-9]*
Literal     {L} <- ['] (!['] Char)* [']
                 / ["] (!["] Char)* ["]
CharClass   {S} <- '[' (!']' CharRange)* ']'
CharRange   { } <- Char '-' Char / Char
Char        { } <- EscChar / OctChar / PlainChar 
PlainChar   {L} <- !'\\' .
EscChar     {L} <- '\\' [nrt'"\[\]\\]
OctChar     {L} <- '\\' [0-3][0-7][0-7]
                 / '\\' [0-7][0-7]?
Dot         {L} <- '.'
PredOp      {L} <- [&!]
RepOp       {L} <- [*+?]
S           {I} <- ([ \t\r\n]+ / '#' (![\r\n] .)* [\r\n] )*

#leftarrow   {I} <- '<-' S
#slash       {I} <- '/' S
#and         {L} <- '&' S
#not         {L} <- '!' S
#question    {L} <- '?' S
#star        {L} <- '*' S
#plus        {L} <- '+' S
#open        {I} <- '(' S
#close       {I} <- ')' S
#S         {I} <- (space / comment)*
#comment     {I} <- '#' (!eol .)* eol
#space       {I} <- ' ' / '\t' / eol
#eol         {I} <- '\r\n' / '\n' / '\r'
#eof         {I} <- !.

